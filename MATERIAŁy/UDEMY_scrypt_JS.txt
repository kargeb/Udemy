PODSTAWY  przypomnienie

alert(X + y);    ...  :)

Niby mozna pomin±æ ¶redniki w JS i tak wszystko bêdzie dzia³±æ !

deklaracja to samo zarezewrowanie pamieci, inicjalizacja to juz przypisanie wartosci.

/*
 * typy zmiennych:
 * 1) liczby - number
 * 2) ci±g znaków - string
 * 3) warto¶æ logiczne - true/false
 * 4) tablice, obiekty - o tym pó¼niej
 * 5) null - pustka
 * 6) undefined - niezdefiniowana
 */

/*
 * NIE WOLNO:
 * 1) zaczynaæ od liczby nazwy zmiennej
 * 2) nie wolno stosowaæ zarezerwowanych s³ów (keywords)
 * 3) tworzyc spacji
 * 
 * WIELKO¦Æ LITER W JAVASCRIPT MA ZNACZENIE!!!
 */
 
 /*
 * OPERATOR - to znaki s³u¿±ce do operowania na zmiennych
 * 
 *  OPERATORY ARYTMETYCZNE
 *      +   dodawanie liczb oraz ³±czenie string'ów
 *      -   odejmowanie
 *      *   mno¿enie
 *      /   dzielenie
 *      
 *      %   reszta z dzielenia (dzielenie modulo)
 *      
 *      =   przypisanie warto¶ci
 *      +=  
 *      -=
 *      /=
 *      *=
 *      %=
 *      
 *      
 *      ++   inkrementacja - powiêksz o 1
 *      --   dekrementacja - zmniejsz o 1
 *      
 *      y++ - POST INKREMENTACJA
 *      y-- - POST dekrementacja
 *      
 *      ++y - PRE INKREMENTACJA
 *      --y - PRE dekrementacja
 *      
 *  
 */
 
 Modulo mozna bardzo fajnie wykorzystac gdy chcemy robic cos na np co 5 lub co 3 elemencie, dajesz wtedy 5%zmienna no i gdy nie ma nic to wiaodmo ze dzieli sie przez 5 czyli co 5.
 
 /*
 * 
 *  OPERATORY RELACYJNE (porównania)
 *  
 *  === - porównuje czy warto¶ci dwóch zmiennych s± IDENTYCZNE
 *  == - porównania
 *  = - operator przypisania
 *  
 *  != - porównuje czy dwie warto¶ci s± od siebie ró¿ne
 *  !== 
 *  
 *  >
 *  <
 *  >=
 *  <=
 *   
 */
 
 FUNKCJE
 
 Pamietaj ze return konczy funkcje !
 
 UWAGA ! Pamiêtaj ze zmienne w JS mozna tworzyc bez slowa VAR, no i jak w funkcji wlasnie stworzysz zmienna bez tego slowa to BEDZIE ONA WIDOCZNA WSZEDZIE ! No bo jak zrobisz normalnie z varem to bedzie widoczna wylacznie w funkcji.
 
 Zmienne tworzone w funkcji przestaja istniec po jej dzia³aniu.
 
 FUNKCJE W ZMIENNEJ !
 
 var x = function test()
 {
	alert("xxxx");
 };
 
	1. po pierwsze musi byc srednik na koncu bo jest to wyrazenie
	2. NIE WYWOLAMY TEJ FUKNCJI JAKO test() !!! Mozemy poslugiwac sie jedynie zmienna x =>  x();
	
Funkcja anonimowa to dokladnie to samo co u góry tylko bez nazwy test:

var x = function()
 {
	alert("xxxx");
 };
	
Czyli korzystamy z nich albo gdy chcemy ja do czegos przypisac, lub gdzies wyslac, lub jako parametr innej funkcji (no no cos cos czaje)

PRZYK£AD WYKORZYTSANIA ANONIMOWEJ:

function test(f)
{
	f(20);
}	
	
test(
	function(x) {
		alert("cosik" + x);
	}
)	
	
 Mowi ¿e najczê¶ciej z anonimowych korzysta siê w framerowkach.
 
 KURWA dalej nie czaje tych anonimowych kurew !
 
 OBIEKTY
 
 Spis wbudowanych obiektów na stronie MDN w zak³adzce "Built-In objects"
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference
	
	"Ogólnie jest to co¶ co poznaje siê ca³e ¿ycie" i chuj
	
	NOwy obiekt:
	
		var x = {};  i juz
		
		var osoba = {imie: "Arek", nazwisko: W³odaczyk"};
		
	UWAGA ! Nie dawaj przecinka po ostatniej w³a¶ciwo¶ci w obiekcie !

	METODY: za pomoca funkcji anoniniwych
	
	var osoba = {
		imie: "Arek", 
		nazwisko: W³odaczyk"
		
		pobierzDane: function()
		{
			return this.imie + " " + this.nazwisko;
		}
	};
	
	zm_div.innerHTML = osoba.pobierzDane();
	( zamiast   zm_div.innerHTML = osoba.imie + " " + osoba.nazwisko; )
	
	-- toString --  Czyli co jesli wywolamy obiekt po prostu bez zadnej innej zmiennej
	
	toString: function()
	{
		return this.imie + " " + this.nazwisko;
	}
	
	div.innerHTML = osoba;    =>  Arek W³odarczyk
	
	-----------------
	
	Wszystkie w³a¶ciwo¶ci mo¿na od razu zmieniaæ:
	
	osoba.imie = "Wiola"  =>   zmienione
	
	UWAGA ! Obiekt mozna sworzyc równiez tak:
	
	var osoba = new Object(
	{
		imie: "Arek", 
		nazwisko: W³odaczyk"
		
		pobierzDane: function()
		{
			return this.imie + " " + this.nazwisko;
		}
	}
	);
	
	Nie zaleca siê tego sposoby, niby to samo ale co¶ kojarze z eduWeb ze jednak czyms to sie roznilo.
	
97. Funkcje konstrukcyjne (klasy)

	Aby nie tworzyc po sto razy takiego samego kodu (osoba1, osoba2) tworzy sie szablony, do ich automatycznego tworzenia. Oczywiscie jesli tworzymy jeden obiekt na caly projekt to nie ma nic zlego w tworzeniu go tak jak w poprzedniej lekcji.
	
	/*  
 * Obiekty - to pojemniki do przechowywania zmiennych i funkcji tematycznie 
 *           ze sob± zwi±zanych do dalszego ³atwiejszego ponownego u¿ycia
 *           
 * Klasa -  W skrócie klasa to forma do wytwarzania obiektów.
 *          Ta foremka s³u¿y do zebrania obiektów w jedn± "klasê". 
 *          Daje mo¿liwo¶æ stworzenia z tej formy wielu nowych ró¿ni±cych siê 
 *          minimalnie od siebie obiektów, 
 *          ale bêd±cych dalej do siebie podobnych cechami i metodami.
 *          
 */

	Najlatwiej odroznik zwykla funkcje od klasy tym ze klasa ma z regoly nazwe rzeczownika a funkcja czasownika.
 
	function osoba(imie, nazwisko)
	{
		this.nawe = imie;
		this.surname = nazwisko;
		
		this.toString = function()
		{
		return this.name + " " + this.surname;
		}
	}
	
		Tworzenie obiektu nowej "klasy" NEW NEW NEW !!!
		
	var x = new osoba("Arek", "Franczyk");

	zm_div.innerHTML = x;  =>  "Arek Franczyk";
	
	No i dziêki temu mo¿emy tworzyc w ciul osób:
	
	var x = new osoba("Arek", "W³odarczyk", 15);
	var y = new osoba("Wiola", "asfasf", 16);
	var z = new osoba("Agnieszka", "fasf", 20);

	div.innerHTML = x + "<br>" + y + "<br>" + z;
	
98. Prototypy, dodawanie nowych w³a¶ciwo¶ci do klas z zewn±trz.

	W danym obiekcie mozemy bez zadnego problemu dodac sobie jakas dodatkowa wlasciwosc:
	
	x.nowaWl = 12;
	
	Wtedy bedzie ona dostepna tylko dla obiektu x i dla zadnego innego nawet z tej samej klasy.
	
	WSZYSTKIE klasy wzoruj± siê na Object (to jest ich prototyp)
	
	pisz±c "x." mamy juz dostêp do wszystkich metod obiektu Object.
	
	No i tera mozemy skorzystac z protoypu na naszej stworzonej klasie:
	
	osoba.prototype.nowaWl = 12;
	
	Efektem bêdzie przypisanie dla wszystkch stwrzonych w niej obiektów:
	
	div.innerHTML = x.specifiedValue + "<br>" + y.specifiedValue + "<br>" + z.specifiedValue;
	
	=>  12
		12
		12
		
	To dokladnie tak jakbysmy sobie w tej klasie dodali tak± linijkê:
		this.specifiedValue = 12;

	Tyle ze dziêki prototypowi moglismy to zrobic z zewtnarz, nie otwierajac danej klasy, podobno stosuje sie to wlasnie na frameworkach.

	UWAGA UWAGA ! :) :) :) Gosc odraza korzystanie w javie z dziedczenia bo mowi ze jest to ciulowo rozwi±zane i SAM NIGDY Z TEGO NIE SKORZYSTA£ i ¿e ogólnie siê z tego nie korzysta ! ¯e s± ciekawsze i lepsze rozwi±zania ! :) :) :) 

99 Tablice ARRAYS

	Kontener do ktorego mozna wrzucic wiele rzeczy i one sa kolo siebie i mozna sie pozniej do nich dostac za pomoca indexow.

	Czyli zamiast napieprzac:
			var produk1, pr2, pr3, pr4 ... i za kazdym razem dodawac nowy jak sie pojawi to robimy sobie wlasnie taki zbiornbik i na nim pracujemy
			
	var produkty = {
		"php",
		"js",
		"msql"
	}	
	
	alert(prodyktu[0]);
	
	Dopisanie:
	
	prodkuty[3] = "Pdo";
	
	No ale wiaodmo ze nie mozna za kazdym razem tych elementow liczyc wiec :
	
	produkty[produkty.length] = "PDO"	DOBRE
	
	Ale mozna tez oczywiscie:
	
	produkty.push("PDO");		PUSH
	
	aby wypisac wszyskie to po prosty dajemny nazwe tabeli:
	alert(produkty)
	
	mozemy tez bez oribelmu cos nadpisac czyli
	produkty[2] = "dupa"
	
	Jako ze tablice to tez obiekt wiec mozemy stworzyc ja w taki sposob:
	
	var produkty  = new Array();	ALE GO¦Æ TO ODRAZA bo wolniejszy
	
	-- Tablice Asocjacyjne --
	
		to sie tylko w zasadzie nazywa tablica bo to juz bardziej podchodzi pod obiekt, chodzi o to ze mozna zamiast do nr elementow to przypisaywac do nazw:
		
		osoba["imie"] = "Arek";
		osoba["nazwisko"] = "Franczyk";
		
		alert(osoba["imie:]);
		alert(osoba.nazwisko);	Mozna odwolac sie rowniez za pomoca . !
		
		To raczej tak ze wiesz ze cos takiego istnieje niz zeby z tego korzystac.
		
		Przyklad ponrania wszystkich li za pomoca skryptu:
		
		var kursyProgramowania = document.getElementsByTagName("li");

		alert(kursyProgramowania[6].innerHTML);
		
100 PÊTLE
			
	Przyk³ad WHILE:
	
	var kursyProgramowania = document.getElementById("kursyProgramowania").getElementsByTagName("li");

var i = 0;

while(i < kursyProgramowania.length)
{
    if (kursyProgramowania[i].innerHTML === "C++")
        kursyProgramowania[i].innerHTML += " HIT";
    else
        kursyProgramowania[i].innerHTML += " PROMOCJA";
    
    i++;
}
	Powy¿szy przyk³±d jest namiastk± takiego ciekawego sorotwania odno¶nie warto¶ci które chcemy wyró¿niæ lub wy³owiæ.

	UWAGA ! Ogólnie to zawsze korzytsaj z pêtli gdy jest taka mo¿liwo¶æ, nie rób tego rêcznie bo chodzi o to ¿eby twój kod by³ elastyczny i reagowa³ na zmiany na stronie.
	
	UWAGA ! Fajnym sposobem na testowanie pêtki jest dawanie alerta w linijkach ktore chcemy sprawdzic wtedy petla za kazdym okrozeniem bedzie zatrzymywana.
	
102 Break i continue:

		var kursyProgramowania = document.getElementById("kursyProgramowania").getElementsByTagName("li");

for (var i = 0; i < kursyProgramowania.length; i++)
{    
    
    if (i % 2 !== 0)
        kursyProgramowania[i].innerHTML = "parzysty: " + kursyProgramowania[i].innerHTML;
    else
        continue; //przerwij wykonywanie danej iteracji i kontynuuj, nastêpne instrukcje po continue nie zostan± wywo³ane   
}
	
	UWAGA ! Ciekawa rzecz odnosnie continue. Bardzo dobrym pomyslem jest z tego korzystac gdy chcemy wylowaic z jakiegos zbioru pewne rzeczy i z nimi cos robic w dalszej czesci kodu, to zamiast stosowac jakies ify to po prostu dajemy CONTINUE po else i oszczedzamy czas i kod (tak jak u góry).
	
		Break jak wiadomo za³atwia dzia³anie CE£EJ pêtli !
	
103 Pêtla FOR/IN

	STWORZONA DO LATANIA PO W£A¦CIWO¦CIACH OBIEKTÓW !

	UWAGA ! (bo to sie jebie) PIERWSZY sk³adnik (property) nazywamy JAK NAM SIÊ PODOBA ! a drugi (person) TO JUZ AUTENTYCZNY OBIEKT (tablica) Z KODU !
	
	person = {
	imie: "Arek",
	nazwisko: "W³odarczyk",
	wiek: "26"
	};
	
	
	Do w³a¶ciwo¶ci obiektu mozna dostaæ siê zaorówno:
	
	person.imie;
	jak i 
	person["imie"];
	
	
	for (var property in person)
	{
		alert(person[property]);   => wypisze po koleji: Arek, W³odarczyk, 26
	}
	
	Czyli mozna np zorbic :
	
	var wszystkieDaneCHlopa = "";  (nadajemy pusty zeby mozna bylo uzyc =+ !!
	
	for (var property in person)
	{
		wszystkieDaneChlopa += person[property]; 
	}
	
	Je¶li pobieramy cos ze strony czy skads:
	
	var kursyProgramowania = document.getElementById("kursyProgramowania").getElementsByTagName("li");
	
	moze sie zdarzyc ze zamiast obiektow beda jakies inne rzeczy funkcje czy cos, wtedy dobrze jest sobie to np od razu porownac czy mamy do czynienia z obietkem:
	
	
	for (var property in kursyProgramowania)
	{
   if (typeof(kursyProgramowania[property]) !== "object")
        break;  (lub continue jesli nie jestesmy pewni czy cos tam jeszcze jest po funkcjach)
    
   alert(kursyProgramowania[property].innerHTML);
	}	
	
	OGLNIE to ta pêtla jest idealna kiedy chcemy przechodziæ po obiektach i nie wiemy jak nazywaj± siê poszczególne w³a¶ciow¶æi !
	Je¶li chcemy przelecieæ co¶ w³a¶nie pobrane sk±d¶to lepiej skorzystaæ z fora czy innego whila.
	
	
	
	
	
	
	
	
	