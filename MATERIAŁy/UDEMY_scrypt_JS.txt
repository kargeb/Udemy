PODSTAWY  przypomnienie

alert(X + y);    ...  :)

Niby mozna pomin±æ ¶redniki w JS i tak wszystko bêdzie dzia³±æ !

deklaracja to samo zarezewrowanie pamieci, inicjalizacja to juz przypisanie wartosci.

/*
 * typy zmiennych:
 * 1) liczby - number
 * 2) ci±g znaków - string
 * 3) warto¶æ logiczne - true/false
 * 4) tablice, obiekty - o tym pó¼niej
 * 5) null - pustka
 * 6) undefined - niezdefiniowana
 */

/*
 * NIE WOLNO:
 * 1) zaczynaæ od liczby nazwy zmiennej
 * 2) nie wolno stosowaæ zarezerwowanych s³ów (keywords)
 * 3) tworzyc spacji
 * 
 * WIELKO¦Æ LITER W JAVASCRIPT MA ZNACZENIE!!!
 */
 
 /*
 * OPERATOR - to znaki s³u¿±ce do operowania na zmiennych
 * 
 *  OPERATORY ARYTMETYCZNE
 *      +   dodawanie liczb oraz ³±czenie string'ów
 *      -   odejmowanie
 *      *   mno¿enie
 *      /   dzielenie
 *      
 *      %   reszta z dzielenia (dzielenie modulo)
 *      
 *      =   przypisanie warto¶ci
 *      +=  
 *      -=
 *      /=
 *      *=
 *      %=
 *      
 *      
 *      ++   inkrementacja - powiêksz o 1
 *      --   dekrementacja - zmniejsz o 1
 *      
 *      y++ - POST INKREMENTACJA
 *      y-- - POST dekrementacja
 *      
 *      ++y - PRE INKREMENTACJA
 *      --y - PRE dekrementacja
 *      
 *  
 */
 
 Modulo mozna bardzo fajnie wykorzystac gdy chcemy robic cos na np co 5 lub co 3 elemencie, dajesz wtedy 5%zmienna no i gdy nie ma nic to wiaodmo ze dzieli sie przez 5 czyli co 5.
 
 /*
 * 
 *  OPERATORY RELACYJNE (porównania)
 *  
 *  === - porównuje czy warto¶ci dwóch zmiennych s± IDENTYCZNE
 *  == - porównania
 *  = - operator przypisania
 *  
 *  != - porównuje czy dwie warto¶ci s± od siebie ró¿ne
 *  !== 
 *  
 *  >
 *  <
 *  >=
 *  <=
 *   
 */
 
 FUNKCJE
 
 Pamietaj ze return konczy funkcje !
 
 UWAGA ! Pamiêtaj ze zmienne w JS mozna tworzyc bez slowa VAR, no i jak w funkcji wlasnie stworzysz zmienna bez tego slowa to BEDZIE ONA WIDOCZNA WSZEDZIE ! No bo jak zrobisz normalnie z varem to bedzie widoczna wylacznie w funkcji.
 
 Zmienne tworzone w funkcji przestaja istniec po jej dzia³aniu.
 
 FUNKCJE W ZMIENNEJ !
 
 var x = function test()
 {
	alert("xxxx");
 };
 
	1. po pierwsze musi byc srednik na koncu bo jest to wyrazenie
	2. NIE WYWOLAMY TEJ FUKNCJI JAKO test() !!! Mozemy poslugiwac sie jedynie zmienna x =>  x();
	
Funkcja anonimowa to dokladnie to samo co u góry tylko bez nazwy test:

var x = function()
 {
	alert("xxxx");
 };
	
Czyli korzystamy z nich albo gdy chcemy ja do czegos przypisac, lub gdzies wyslac, lub jako parametr innej funkcji (no no cos cos czaje)

PRZYK£AD WYKORZYTSANIA ANONIMOWEJ:

function test(f)
{
	f(20);
}	
	
test(
	function(x) {
		alert("cosik" + x);
	}
)	
	
 Mowi ¿e najczê¶ciej z anonimowych korzysta siê w framerowkach.
 
 KURWA dalej nie czaje tych anonimowych kurew !
 
 OBIEKTY
 
 Spis wbudowanych obiektów na stronie MDN w zak³adzce "Built-In objects"
	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference
	
	"Ogólnie jest to co¶ co poznaje siê ca³e ¿ycie" i chuj
	
	NOwy obiekt:
	
		var x = {};  i juz
		
		var osoba = {imie: "Arek", nazwisko: W³odaczyk"};
		
	UWAGA ! Nie dawaj przecinka po ostatniej w³a¶ciwo¶ci w obiekcie !

	METODY: za pomoca funkcji anoniniwych
	
	var osoba = {
		imie: "Arek", 
		nazwisko: W³odaczyk"
		
		pobierzDane: function()
		{
			return this.imie + " " + this.nazwisko;
		}
	};
	
	zm_div.innerHTML = osoba.pobierzDane();
	( zamiast   zm_div.innerHTML = osoba.imie + " " + osoba.nazwisko; )
	
	-- toString --  Czyli co jesli wywolamy obiekt po prostu bez zadnej innej zmiennej
	
	toString: function()
	{
		return this.imie + " " + this.nazwisko;
	}
	
	div.innerHTML = osoba;    =>  Arek W³odarczyk
	
	-----------------
	
	Wszystkie w³a¶ciwo¶ci mo¿na od razu zmieniaæ:
	
	osoba.imie = "Wiola"  =>   zmienione
	
	UWAGA ! Obiekt mozna sworzyc równiez tak:
	
	var osoba = new Object(
	{
		imie: "Arek", 
		nazwisko: W³odaczyk"
		
		pobierzDane: function()
		{
			return this.imie + " " + this.nazwisko;
		}
	}
	);
	
	Nie zaleca siê tego sposoby, niby to samo ale co¶ kojarze z eduWeb ze jednak czyms to sie roznilo.
	
97. Funkcje konstrukcyjne (klasy)

	Aby nie tworzyc po sto razy takiego samego kodu (osoba1, osoba2) tworzy sie szablony, do ich automatycznego tworzenia. Oczywiscie jesli tworzymy jeden obiekt na caly projekt to nie ma nic zlego w tworzeniu go tak jak w poprzedniej lekcji.
	
	/*  
 * Obiekty - to pojemniki do przechowywania zmiennych i funkcji tematycznie 
 *           ze sob± zwi±zanych do dalszego ³atwiejszego ponownego u¿ycia
 *           
 * Klasa -  W skrócie klasa to forma do wytwarzania obiektów.
 *          Ta foremka s³u¿y do zebrania obiektów w jedn± "klasê". 
 *          Daje mo¿liwo¶æ stworzenia z tej formy wielu nowych ró¿ni±cych siê 
 *          minimalnie od siebie obiektów, 
 *          ale bêd±cych dalej do siebie podobnych cechami i metodami.
 *          
 */

	Najlatwiej odroznik zwykla funkcje od klasy tym ze klasa ma z regoly nazwe rzeczownika a funkcja czasownika.
 
	function osoba(imie, nazwisko)
	{
		this.nawe = imie;
		this.surname = nazwisko;
		
		this.toString = function()
		{
		return this.name + " " + this.surname;
		}
	}
	
		Tworzenie obiektu nowej "klasy" NEW NEW NEW !!!
		
	var x = new osoba("Arek", "Franczyk");

	zm_div.innerHTML = x;  =>  "Arek Franczyk";
	
	No i dziêki temu mo¿emy tworzyc w ciul osób:
	
	var x = new osoba("Arek", "W³odarczyk", 15);
	var y = new osoba("Wiola", "asfasf", 16);
	var z = new osoba("Agnieszka", "fasf", 20);

	div.innerHTML = x + "<br>" + y + "<br>" + z;
	
98. Prototypy, dodawanie nowych w³a¶ciwo¶ci do klas z zewn±trz.

	W danym obiekcie mozemy bez zadnego problemu dodac sobie jakas dodatkowa wlasciwosc:
	
	x.nowaWl = 12;
	
	Wtedy bedzie ona dostepna tylko dla obiektu x i dla zadnego innego nawet z tej samej klasy.
	
	WSZYSTKIE klasy wzoruj± siê na Object (to jest ich prototyp)
	
	pisz±c "x." mamy juz dostêp do wszystkich metod obiektu Object.
	
	No i tera mozemy skorzystac z protoypu na naszej stworzonej klasie:
	
	osoba.prototype.nowaWl = 12;
	
	Efektem bêdzie przypisanie dla wszystkch stwrzonych w niej obiektów:
	
	div.innerHTML = x.specifiedValue + "<br>" + y.specifiedValue + "<br>" + z.specifiedValue;
	
	=>  12
		12
		12
		
	To dokladnie tak jakbysmy sobie w tej klasie dodali tak± linijkê:
		this.specifiedValue = 12;

	Tyle ze dziêki prototypowi moglismy to zrobic z zewtnarz, nie otwierajac danej klasy, podobno stosuje sie to wlasnie na frameworkach.

	UWAGA UWAGA ! :) :) :) Gosc odraza korzystanie w javie z dziedczenia bo mowi ze jest to ciulowo rozwi±zane i SAM NIGDY Z TEGO NIE SKORZYSTA£ i ¿e ogólnie siê z tego nie korzysta ! ¯e s± ciekawsze i lepsze rozwi±zania ! :) :) :) 

99 Tablice ARRAYS

	Kontener do ktorego mozna wrzucic wiele rzeczy i one sa kolo siebie i mozna sie pozniej do nich dostac za pomoca indexow.

	Czyli zamiast napieprzac:
			var produk1, pr2, pr3, pr4 ... i za kazdym razem dodawac nowy jak sie pojawi to robimy sobie wlasnie taki zbiornbik i na nim pracujemy
			
	var produkty = {
		"php",
		"js",
		"msql"
	}	
	
	alert(prodyktu[0]);
	
	Dopisanie:
	
	prodkuty[3] = "Pdo";
	
	No ale wiaodmo ze nie mozna za kazdym razem tych elementow liczyc wiec :
	
	produkty[produkty.length] = "PDO"	DOBRE
	
	Ale mozna tez oczywiscie:
	
	produkty.push("PDO");		PUSH
	
	aby wypisac wszyskie to po prosty dajemny nazwe tabeli:
	alert(produkty)
	
	mozemy tez bez oribelmu cos nadpisac czyli
	produkty[2] = "dupa"
	
	Jako ze tablice to tez obiekt wiec mozemy stworzyc ja w taki sposob:
	
	var produkty  = new Array();	ALE GO¦Æ TO ODRAZA bo wolniejszy
	
	-- Tablice Asocjacyjne --
	
		to sie tylko w zasadzie nazywa tablica bo to juz bardziej podchodzi pod obiekt, chodzi o to ze mozna zamiast do nr elementow to przypisaywac do nazw:
		
		osoba["imie"] = "Arek";
		osoba["nazwisko"] = "Franczyk";
		
		alert(osoba["imie:]);
		alert(osoba.nazwisko);	Mozna odwolac sie rowniez za pomoca . !
		
		To raczej tak ze wiesz ze cos takiego istnieje niz zeby z tego korzystac.
		
		Przyklad ponrania wszystkich li za pomoca skryptu:
		
		var kursyProgramowania = document.getElementsByTagName("li");

		alert(kursyProgramowania[6].innerHTML);
		
100 PÊTLE
			
	Przyk³ad WHILE:
	
	var kursyProgramowania = document.getElementById("kursyProgramowania").getElementsByTagName("li");

var i = 0;

while(i < kursyProgramowania.length)
{
    if (kursyProgramowania[i].innerHTML === "C++")
        kursyProgramowania[i].innerHTML += " HIT";
    else
        kursyProgramowania[i].innerHTML += " PROMOCJA";
    
    i++;
}
	Powy¿szy przyk³±d jest namiastk± takiego ciekawego sorotwania odno¶nie warto¶ci które chcemy wyró¿niæ lub wy³owiæ.

	UWAGA ! Ogólnie to zawsze korzytsaj z pêtli gdy jest taka mo¿liwo¶æ, nie rób tego rêcznie bo chodzi o to ¿eby twój kod by³ elastyczny i reagowa³ na zmiany na stronie.
	
	UWAGA ! Fajnym sposobem na testowanie pêtki jest dawanie alerta w linijkach ktore chcemy sprawdzic wtedy petla za kazdym okrozeniem bedzie zatrzymywana.
	
102 Break i continue:

		var kursyProgramowania = document.getElementById("kursyProgramowania").getElementsByTagName("li");

for (var i = 0; i < kursyProgramowania.length; i++)
{    
    
    if (i % 2 !== 0)
        kursyProgramowania[i].innerHTML = "parzysty: " + kursyProgramowania[i].innerHTML;
    else
        continue; //przerwij wykonywanie danej iteracji i kontynuuj, nastêpne instrukcje po continue nie zostan± wywo³ane   
}
	
	UWAGA ! Ciekawa rzecz odnosnie continue. Bardzo dobrym pomyslem jest z tego korzystac gdy chcemy wylowaic z jakiegos zbioru pewne rzeczy i z nimi cos robic w dalszej czesci kodu, to zamiast stosowac jakies ify to po prostu dajemy CONTINUE po else i oszczedzamy czas i kod (tak jak u góry).
	
		Break jak wiadomo za³atwia dzia³anie CE£EJ pêtli !
	
103 Pêtla FOR/IN

	STWORZONA DO LATANIA PO W£A¦CIWO¦CIACH OBIEKTÓW !

	UWAGA ! (bo to sie jebie) PIERWSZY sk³adnik (property) nazywamy JAK NAM SIÊ PODOBA ! a drugi (person) TO JUZ AUTENTYCZNY OBIEKT (tablica) Z KODU !
	
	person = {
	imie: "Arek",
	nazwisko: "W³odarczyk",
	wiek: "26"
	};
	
	
	Do w³a¶ciwo¶ci obiektu mozna dostaæ siê zaorówno:
	
	person.imie;
	jak i 
	person["imie"];
	
	
	for (var property in person)
	{
		alert(person[property]);   => wypisze po koleji: Arek, W³odarczyk, 26
	}
	
	Czyli mozna np zorbic :
	
	var wszystkieDaneCHlopa = "";  (nadajemy pusty zeby mozna bylo uzyc =+ !!
	
	for (var property in person)
	{
		wszystkieDaneChlopa += person[property]; 
	}
	
	Je¶li pobieramy cos ze strony czy skads:
	
	var kursyProgramowania = document.getElementById("kursyProgramowania").getElementsByTagName("li");
	
	moze sie zdarzyc ze zamiast obiektow beda jakies inne rzeczy funkcje czy cos, wtedy dobrze jest sobie to np od razu porownac czy mamy do czynienia z obietkem:
	
	
	for (var property in kursyProgramowania)
	{
   if (typeof(kursyProgramowania[property]) !== "object")
        break;  (lub continue jesli nie jestesmy pewni czy cos tam jeszcze jest po funkcjach)
    
   alert(kursyProgramowania[property].innerHTML);
	}	
	
	OGLNIE to ta pêtla jest idealna kiedy chcemy przechodziæ po obiektach i nie wiemy jak nazywaj± siê poszczególne w³a¶ciow¶æi !
	Je¶li chcemy przelecieæ co¶ w³a¶nie pobrane sk±d¶to lepiej skorzystaæ z fora czy innego whila.
	
	
---------------------------------------------------------------------------------------------------	
---------------------------------    D   O   M    ----------------------------------------------	
---------------------------------------------------------------------------------------------------
	
	Document Object Model
	
	UWAGA ! Wêze³ jest to KA¯DY byt na naszej stronie, SPACJE RÓWNIE¯ ! Dlatego przy pobieraniu czego¶ ze strony trzeba sorotowaæ uwaznie otrzymane wyniki.
	
	
	/*
    nodeName	nazwa wêz³a (najczê¶ciej nazwa tagu)
    nodeValue	wartosæ wêz³a
    parentNode	rodzic wêz³a
    childNodes	tablica dzieci danego obiektu
    firstChild	pierwsze dziecko (wêze³)
    lastChild	ostatnie dziecko (wêze³)
    previousSibling	zwraca poprzedni wêze³ na tym samym poziomie (jego krewniaka)
    nextSibling         zwraca nastêpny wêze³ na tym samym poziomie (jego krewniaka)
    attributes          tablica atrybutów elementu 
                        attributes[indeks].nodeValue zwraca warto¶æ atrybutu 
                        lepiej stosowaæ funkcjê getAttribute("nazwa")
    textContent zawarto¶æ tekstowa JEST WSPIERANY OD IE 9 >
    innerHTML   zawarto¶æ HTML

    setAttribute("nazwaAtrybutu", "wartosc atrybutu");
    removeAttribute("nazwaAtrybutudousuniecia");
                        
	*/
	
	Zawsze warto zapisywac od razu wyniki wyszukiwania do zmiennych bo oszczedzamy CZAS i ZASOBY:
	var kursyProgramowania = document.getElementById("kursyProgramowania");
	
	mozna juz na tym etapie wiedzy wstawic klase zmieniajaca np kolor:
	kursyProgramowania.setAttribute("class", "zmienKolor");
	i usunac tez:
	kursyProgramowania.removeAttribute("class");
	
	Odwo³ywanie siê do zawarto¶ci elementów:
		kursyProgramowania.innerHTML   =>  zwróci nam rowniez TAGI html ! Dlatego jest takie cos:
		kursyProgramowania.textContent  => i wlasnie o to bedzie nam najeszczesciej chodzic
		
	TAK SAMO gdy chcesz podmienic tagi to innerHTML a jak tylko zawarto¶ci to textContent !

	Uwaga jak pobierzemy tablice elementów to textContent nam gówno da, trzeba grzenac glebiej.

	UWAGA ! Tu cos ciekawego mówi. Ze jak chcemy sobie sprawdzac czy zawartosc jest elementem czy jakas spacja to korzytsamy z nodeType ! No i nodeType 3 to jest text (spacja) a nodeType 1 to jest ELEMENT !

	UWaga m.in. na te nextSibling i previousSibling	bo one tez pobieraja te #text czyli puste znaki.
	
105 querySelector - szybkie wybieranie

	S± to ZAJEBISTE metody:
		querySelector
		querySelectorAll
		
	Selektory czyli dok³adnie to z czego korzysta CSS !

	

	/*
	-------- ZAST¡PIONE PRZEZ querySelectory -------------------
    getElementById()
    getElementsByTagName()

    s³abiej wspierane:
    getElementsByClassName() - brak wsparcia w ie6,7,8		- wylowienie klasy
    getElementsByName() - brak wsparcia w ie6,7,8,9			- wylowienie name (formularze)
    
	---------------------------------------------------------------
	
    brak wsparcia w ie 6 i 7 i po³owiczne w ie8:
    querySelector() - wybranie pierwszego napotkanego elementu spe³niaj±cego warunek
    querySelectorAll() - wybieranie wszystkich elementów spe³niaj±cych warunek

 */	
	
	STARE:
	var kursyProgramowania = document.getElementById("kursyProgramowania").getElementsByTagName("li");
	
	NOWE:
	var kursyProgramowania = document.querySelectorAll("#kursyProgramowania li");  - wybranie wszystkich
	var kursyProgramowania = document.querySelector("#kursyProgramowania li");  - wybranie pierwszego
	
	gdyby na stronie byla tylko jedna lista ALBO chcielibysmy wziasc WSZYSTKIE li niezaleznie z ilu list to mozna zawsze od razu napisac:
	var kursyProgramowania = document.querySelectorAll("li");  - wybranie wszystkich
	
	jak juz mamy wylownione to dzialamy po prostu:
	
	kursyProgramowania[0].innerHTML  ... itd 
	
	Pamietaj ze to wlasnie dziala jak w CSS wiec mozna zdziwiac :
	var kursyProgramowania = document.querySelector("#kursyProgramowania li:nth-child(4)");
	
	CZYLI TO JEST NAJPOTEZNIEJSZE NARZEDZIE DO WYBIERANIA CZEGOKOLWIEK NA STRONIE I NADUPCANIA 
	
106 Zmiana styli

	Spis najszczêstyszych odwo³añ do styli ze strony	 https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference
	
	CSS	JavaScript
	background					background
	background-attachment		backgroundAttachment
	background-color			backgroundColor
	background-image			backgroundImage
	background-position			backgroundPosition
	background-repeat			backgroundRepeat
	border						border
	border-bottom				borderBottom
	border-bottom-color			borderBottomColor
	border-bottom-style			borderBottomStyle
	border-bottom-width			borderBottomWidth
	border-color				borderColor
	border-left					borderLeft
	border-left-color			borderLeftColor
	border-left-style			borderLeftStyle
	border-left-width			borderLeftWidth
	border-right				borderRight
	border-right-color			borderRightColor
	border-right-style			borderRightStyle
	border-right-width			borderRightWidth
	border-style				borderStyle
	border-top					borderTop
	border-top-color			borderTopColor
	border-top-style			borderTopStyle
	border-top-width			borderTopWidth
	border-width				borderWidth
	clear						clear
	clip						clip
	color						color
	cursor						cursor
	display						display
	filter						filter
	font						font
	font-family					fontFamily
	font-size					fontSize
	font-variant				fontVariant
	font-weight					fontWeight
	height						height
	left						left
	letter-spacing				letterSpacing
	line-height					lineHeight
	list-style					listStyle
	list-style-image			listStyleImage
	list-style-position			listStylePosition
	list-style-type				listStyleType
	margin						margin
	margin-bottom				marginBottom
	margin-left					marginLeft
	margin-right				marginRight
	margin-top					marginTop
	overflow					overflow
	padding						padding
	padding-bottom				paddingBottom
	padding-left				paddingLeft
	padding-right				paddingRight
	padding-top					paddingTop
	page-break-after			pageBreakAfter
	page-break-before			pageBreakBefore
	position					position
	float						cssFloat
	text-align					textAlign
	text-decoration					textDecoration
	text-decoration: blink			textDecorationBlink
	text-decoration: line-through	textDecorationLineThrough
	text-decoration: none			textDecorationNone
	text-decoration: overline		textDecorationOverline
	text-decoration: underline		textDecorationUnderline
	text-indent					textIndent
	text-transform				textTransform
	top							top
	vertical-align				verticalAlign
	visibility					visibility
	width						width
	z-index						zIndex
		
	Oczywiscie zaczynamy od pobrania elementów:
	var kursyProgramowania = document.querySelectorAll("#kursyProgramowania li");	
		
	WSZYSTKO ROZCHODZI SIÊ O OBIEKT "STYLE"

	kursyProgramowania[0].style.color = "red";   i  juz		(jeden element)
	
	for(var index in kursyProgramowania)					(wszystkie elementy)
	{
		kursyProgramowania[index].style.color = "red";
	}
	
	LUB
	
	for(var i=0; i<kursyProgramowania.length; i++)					(wszystkie elementy)
	{
		kursyProgramowania[i].style.color = "red";
	}																	>
	
	ukrywanie elementów:
	
	kursyProgramowania[i].style.display = "none";
	
	
	UWAGA ! To jest fajne i dzia³a ALE MUSISZ ZAGL¡DAÆ W KOD JS aby cos pozmieniaæ ! I przy wiêkszej licznie zmian bêdzie siê to robiæ uci±¿liwe i nieprofesjonalne ! 
	TAK¯E najszêcz¶ciej bêdzoe siê to jednak odbywaæ na zasadzie DODAWANIA I USUWANIA KLAS lub innych atrybutów CSS ! 

107 Dodawanie i usuwanie elementów z witryny

	/*
    dodawanie i usuwanie elementów znajduj±cych siê na stronie
	
    createElement("nazwa_tagu");	- Stworzenie elementu, ALE JEGO TRZEBA JESZCZE DODAÆ BO NIE WIDAÆ

    appendChild		-  DODANIE ELEMENTU	na koñcu

    removeChild

    tmp.parentNode.removeChild(tmp);
    
	*/


	var x = document.createElement("p");	-	zapisujemy do zmiennej zeby go moc pozniej wlasnie dodac

	x.style.color = "red";
	x.className = "tesciur";

	var body = document.querySelector("body");		-	wybarnie elementu "zaczepienia"

	var newChildNode = body.appendChild(x);
	
	--- UWAGA ! Dlaczego nie innerHTML ?  -- !!!!!!!!!!!! 
	
	Czemu dodaje sie w spoosb jak wyzej czyli kazdy parametr z osobna skoro mozna w innera dac ?
	CHODZI O PRZEPARSOWYWYANIE STRONY ! BARDZO TRUDNY B£¡D DO WYKRYCIA !
	
	x.innerHTML = "<p id='testowy2'>nowy tekst<p> 4";
	var testowy2 = document.getElementById("testowy2");
	testowy2.style.color = "green";

	To u góry nam ¶wietnie zadzia³a, ale to u do³u JU¯ NIE !!!
	
	x.innerHTML = "<p id='testowy2'>nowy tekst<p> 4";
	var testowy2 = document.getElementById("testowy2");
	x.innerHTML += "4";
	testowy2.style.color = "green";	-- NIE ZADZIA£¡ !
	
	DLatego ¿e dodanie "4" poprzez innerHTML sprawi³o PRZEPARSOWANIE CA£EJ STRONY co sprawia ¿e zmienna testowy2 NIE ODWO£UJE SIÊ JU¯ DO TEGO ELEMENTU KTÓRY ZMIENIA KOLOR NA ZIELONY ! INNA REFERENCJA !
	Trzebaby zroibæ co¶ takiego ¿eby to naprawiæ:
	
	x.innerHTML = "<p id='testowy2'>nowy tekst<p> 4";
	var testowy2 = document.getElementById("testowy2");
	x.innerHTML += "4";
	var testowy2 = document.getElementById("testowy2"); - PONOWNE POBRANIE ELEMENTU 
	testowy2.style.color = "green";	- znowu dzia³a
	
	Jak widaæ JEST TO POJEBANE i trudne do wychwycenia wiêc trzeba unikaæ innerHTML stosowanego w ten sposób, CHYBA ¯E JESTE¦MY PEWNI ¯E CO¦ DODAMY I JU¯ NIE BÊDZIEMY TEGO ANI RUSZAÆ ANI KORZYSTAÆ !!!!
	
	
	-- usuwanie --

	var kursyProgramowania = document.getElementById("kursyProgramowania");

	kursyProgramowania.parentNode.removeChild(kursyProgramowania);
	
	Jedynym sposobem (na moment tej lekcji) na usuniecie czegos jest wlasnie skoczenie do rodzica i usuniecie siebie samego jako dziecka.
	
	LEPSZE METODY S¡ W jQUERY 
	
	UWAGA ! Usuwanie elementów zabiera duzo zasobów WIÊÆ NAJCZÊ¦CIEJ nie bêdziemy usuwaæ elementów tylko je ewentualnie CHOWAÆ ! Musisz mieæ bardzi dobry powód ¿eby co¶ usun±æ ! I robi siê to RZADKO !
	
---------------------------------------------------------------------------------------------------	
---------------------------------    E V E N T S    ----------------------------------------------	
---------------------------------------------------------------------------------------------------	

Eventów jest w chuj, mozna czytac o nich m.in. na MDN

Tworzenie eventu: 

	1. PIERWSZY najgorszy sposób:

	Dodanie event bezpo¶rednio w kodzie HTML:
	<div onmouseover=alert("dupa")>To jest testowy tekst o niczym :-)</div>
	
	Mozna oczywiscie dodac wlasna funkcje:
	
	function wypisz_tekst(tekst)
	{
		alert(tekst + " !!!!!!!!!!!!");
	}
	
	<div onmouseover="wypisz_tekst('dupa wlasna')">To jest testowy tekst o niczym :-)</div>
		UWAGA ! Pamiêtaæ o cudzys³wach ju¿ po znaku "=" !!! (alert mglbyc bez !)
	
	2. DRUGI troche lepszy spoób:
	
	Obs³u¿enie eventu w kodzie JS:
	
		Zidentyfikowanie danego elementu: 
		<div id="test">To jest testowy tekst o niczym :-)</div>
	
		Obs³uzenie go w kodzie:
		
		function wypiszCosTam()
		{
			alert("Asfasf");
		}
		
		var test = document.getElementById("test");		-	pobranie elementu do zmiennej
		 lub tak :) => var test = document.querySelector("#test");
		 
		test.onclick = wypiszCosTam;	-	obluga zdarzenia
		
		UWAGA ! Nie mozesz zrobiæ:   test.onclick = alert("Wypisz cos tam");
		No bo to sie wywola od razu, bez klikania, zaraz po zaladowaniu strony (on widzi wywolanie funkcji wiec to robi, nie obchodzi go ze to jesy dopiero przypisanie);
		
		UWAGA ! 
		test.onclick = wypiszCosTam;  takie wywolanie zdarzenia, przez nazwe funkcji jest dobre TYLKO WTEDY gdy nie chcemy przekazywac zadnych partametrów ! No bo gdy dame jakies w nawiasach to ona znowu od razu sie wykona !
		Aby mozna bylo przesylac parametry TRZEBA POSLUZYC SIE FUNKCJA ANIONIMOWA !
		
		function wypisz_tekst(tekst)
		{
			alert(tekst + " !!!!!!!!!!!!");
		}		
			
		test.onclick = function() {
			wypisz_tekst("test tekstu wypisanego z funkcji");
		};
		
		W TYM SPOSOBNIE JEST PROBLEM GDY CHCEMY KILKA ZDARZEN PRZYPISAC DO JEDNEGO ELEMENTU, A JESLI NAWET ZROBIMY TO ZA POMOCA FUNKCJI ANONIMOWEJ TO JUZ CALKIEM PRZEJEBANE JEST POZNIEJ USUNAC NA ZYCZENIE KTORYS Z TYCH KONKRETNYCH ZDARZE.
		Aczkolwiek mimo wszystko do drobynch zdarzen czy w malych projektoach mozna juz w ten spoosb dzialac, zeby go przynajmniej nie zapomieniec.
		
109 ODwo³ywanie siê do w³a¶ciow¶æi elementu który wywo³a³ zdarzenie.

	Bardzo czêsto bedzie tak ze bedziesz chcial zmienic cos w elemencie na ktorym wywolales zdarzenie.

	THIS
	
	Aby zmienic element wywolujacy teoretycznie mozna zrobic tak: (podajac po prostu jego nazwe)
	
	function zmienKolor()
	{
		test.color = "red";
	}
	
	var test = document.getElementById("test");

	test.onmouseover = zmienKolor;
		
	ALE TO JEST Z£Y SPÓSÓB bo np ktos moglby zmienic nazwe zmiennej i juz by przestalo dzialac, a poza tym w kodzie o 100000 linijkach nikt nie bedzie szukal "co to jest kurwa ten test i gdzie to jest".
	Poza tym przy pobiraniu tablic i robeiniu na kazdym elemencie z osobna zdarzenia to JA PIERDOLE co by bylo.

	Wiêc po prostu uzywamy sk³owa THIS.
	
	function zmienKolor()
	{
		this.color = "red";
	}
	
	
	Wiêksza profeska to uzyc do tego klas:
	
	.zmienKolor
	{
		color: red;
	}
	
	
	function zmienKolor()
	{
		this.className = "zmienKolor";	-	dodanie klasy
	}
	
	function zmienKolor2()
	{
		this.removeAttribute("class");	 // mozna tez tak : className = "";
	}
	
	test.onmouseover = zmienKolor;
	test.onmouseout = zmienKolor2;
	
	--- pobarnie dowolnego atrybutu dowlnego elementu ---
		window.getComputedStyle(test, null).getPropertyValue('font-size')
		
110 ONLOAD

	UWAGA ! No bo teraz to wszystko dzia³a³o mimo tego ze skrypt uruchamiany jest w sekcji HEAD a nie na dole BODY. Dzialo sie tak dlatego bo mielismy przy tagu STYLE umieszczone slowo "async"
		<script src="js/script.js" async></script>  
	
	Nie powiedzial gosc ze wystarczy ta linijke wkleic na koniec dokumnetu html, zamiast tego zeby zawsze skrypty zawierac w zdarzeniu onload:
	
	window.onload = function()
	{
		var test = document.getElementById("test");

		test.onmouseover = zmienKolor;
		test.onmouseout = zmienKolor2;
	};
	
111. EventListener	

	Lekcja o:
	    addEventListener
		removeEventListener
		
	3 TRZECI SPOSÓB DODAWANIA ZDARZEÑ:

		test.addEventListener("mouseover", zmienKolor);
		test.addEventListener("mouseout", zmienKolor2);
		
		UWAGA ! Tutaj nazwy tych samych zdarzen co poprzenio pozbawione s± "on" na pocz±tku ich nazwy
		
		No i ten sposób JEST NAJLEPSZY, mozemy sobie w kazdej chwili bez zadnego problemu dodac kolejne zdarzenie i to na 100% bedzie dzialac, nawet rownoczesnie z innymi.
		
		test.addEventListener("mouseover", zmienKolor);
		test.addEventListener("mouseover", powiekszCzionke);
		test.addEventListener("mouseout", zmienKolor2);
		
		UWAGA ! zeby pobrac atrybut elementu na ktorym wywolalismy zdarzenie to robimy tak:
			var fontSize = parseInt(window.getComputedStyle(this).fontSize);
			
		USUWANIE EventListenerow:

		test.removeEventListener("mouseover", powiekszCzionke);
		
112. Automatycznie przesy³any do funkcji obiekt EVENT

	/*
    altKey, ctrlKey, shiftKey - czy podczas wywo³ania eventu by³y wci¶niête klawisze alt, ctrl, shift?
    button - które przyciski myszy zosta³y klikniête (nie dzia³a w ka¿dym evencie)
    clientX, clientY - w którym miejscu jest mycha wzglêdem 0,0
    keyCode - zwraca w postaci liczby jaki klawisz zosta³ wci¶niêty, String.fromCharCode(e.keyCode) zwróci jaka to warto¶æ
    target.tagName - nazwa tagu elementu który wywo³a³ zdarzenie wspierane w ka¿dej przegl±darce prócz IE 6-8 
                     u¿yj srcElement dla IE na starcie mo¿na napisaæ: var srcElement = e.target ? e.target : e.srcElement;

	*/
	
	var test = document.getElementById("test");
    
	test.onmousemove = wykonaj;	 	-	2 metoda zeby bylo prosciej

	function wykonaj(e)	- e jest przesylany ZAWSZE ! Nawet jak z niego nie chcemy skorzystac !
	{					  ON NIE MUSI NAZYWAC SIE e !!! Mozne jak badz ! wykonaj(edupadupa)
	

		var tmp = document.getElementById("tmp");
		
		tmp.innerHTML = e;  => Object mouseEvent
	}
	
		--	UWAGA !	--
		var e =  event || window.event;		-	nieistotne, to jest do starych IE
		
		cos takiego to jest ALTERNATYWA i ona jako operator ZAWSZE wybiera to co jest PRAWDZIWE ! 
		Czyli jak nie bedzie event to bierze window.event, a jak prawdziwa jest pierwsza wartosc to juz jej nie obchodi druga i od razu bierze ta pierwsza.
		
	-- ToolTip --

	#tooltip
	{
		display: none;
		background-color: teal;
		position: absolute;
		width: 150px;
		height: 50px;
	}	
	
	var test = document.getElementById("test");
	
    test.onmousemove = wykonaj;		-	 2 metoda zeby bylo prosciej
	
	function wykonaj(e)
	{	
		var tooltip = document.getElementById("tooltip");
		
		tooltip.style.display = "block";	-	 pajewienie sie tooltipa po najechaniu
		
		tooltip.style.left = e.clientX + 10 + "px";		-	 zmiana pozycji na bierzaco
		tooltip.style.top = e.clientY + 10 + "px";
	}
	
	
	Wszystko gra ale jesli chcemy przeslac jakis argument to musimy wziasc funkcje anonimowa!

	window.onload = function()
	{
		var test = document.getElementById("test");
		
		test.onmousemove = function(event)	- funckja anonimowa ! Musmy przesalc EVENT jako parametr
		{
			
			wykonaj(event, this.tagName);	-  jako tag name jest wartosc "DIV" no bo "test" to jest div
		};
	   
	};
	
		function wykonaj(event, str)
	{
		var e =  event || window.event;
		var srcElement = e.target || e.srcElement;		- kurwa tutaj znowu z tym ie 
		
		var tmp = document.getElementById("tmp");
		
		tmp.innerHTML = e.clientX + " " + srcElement.tagName;	- czyli tak naprawde e.target zamiast srcElement
		
		var tooltip = document.getElementById("tooltip");
		
		tooltip.style.display = "block";
		
		tooltip.style.left = e.clientX + 10 + "px";
		tooltip.style.top = e.clientY + 10 + "px";
	}
	
	Chujowo wyjasnil poki co ten target, ogolnie do THIS wskazuje na element ktory wywolal zdarzenie a e.target konkretny element klikniety czy cos
	
113. Propagacja - rozmnarzanie sie eventow

	    <body> 

        <div id="test">
            <b id="pogrubiony">To jest pogrubiony tekst</b> a to jest zwyk³y
            <button id="przycisk">Kliknij mnie</button>            
        </div>
		
		
		Chodzi o to ze zdarzenie mamy przypisane na DIV "test" a dzieki temu ze zdarzenia babelkuja do gory,
		to mimo ze naciskamy na np przycisk w DIVIE test to e.target wyswietla BUTTON ! To wlasnie dzieki propagacji
		
		 
		 var test = document.getElementById("test");
		var pogrubiony = document.getElementById("pogrubiony");
		var przycisk = document.getElementById("przycisk");
	
	
	    test.onclick = function(event)
		{    
			alert("test");
			wykonaj(event, this);
		};
	
	
		function wykonaj(event, eventObj)
		{
			var tmp = document.getElementById("tmp");
			
			tmp.innerHTML = "ród³o eventu: " + e.target.tagName + "<br>event przypisany do tagu: "+ eventObj.tagName;
		}
	
		Ale z tej progagacji nie zawsze chcemy korzystac np jak jakas funkcja przypisana do buttona wywoluje nam sie znowu
		po pezeskoczeniu do diva test i moze jeszcze nawet pozniej do body ! 
		Dlatego czasami trzeba blokowac ta propagacje.
		
		Czyli jesli jedna funkcja jest na caly DIV to spoko ! Ale jesli kazdy ZAGNIEZDZONY element ma osobna funkcje do czegos,
		to nie chcemy zeby nam sie odpalaly funkcje dla "rodzicow" naszego wybranego elementu !
		
		 var test = document.getElementById("test");
		var pogrubiony = document.getElementById("pogrubiony");
		var przycisk = document.getElementById("przycisk");
		
		test.onclick = function(event)
		{    
			alert("test");
			wykonaj(event, this);
		};
		pogrubiony.onclick = function(event)
		{    
			alert("pogrubiony");
		};
		przycisk.onclick = function(event)
		{    
			alert("przycisk");
		};   
		
		TAK JAK U GÓRY gdy klikamy na "przycisk" to poza alertem "przycisk" wyskoczy tez alert "test" !!!!!!!!!!
	
		ZATRZYMUJEMY PROPAGACJE !  ->  event.stopPropagation();			I TYLE !
		
		pogrubiony.onclick = function(event)
		{    
			alert("pogrubiony");
			event.stopPropagation();	// ta linjka !
		};
		przycisk.onclick = function(event)
		{    
			alert("przycisk");
			event.stopPropagation();	// ta linijka 
		}; 
	
		Po dodaniu tej jednej komendym nie beda nam sie uruchamiacy eventy na rodzicu.
		
114. OreventDefault - zapobieganie domyslnej akcji.

	Wiadomo o co chodzi. Przyklad rowniez na formularzu. Jesli przed wyslaniem formularza chcemy zatrzymac przesylanie danych
	po to zeby spawdzic poprawnosc wypelnionycj pol, no to wlasnie zapobiegamy DOMYSLNEJ AKCJI PRZYCISKU.
	
	   <form id="newsletter">
            Email: <input type="text" id="email"> 
			input type="submit" value="Wylij">
       </form>
	   
	  
		var email = document.getElementById("email");
		var submitFormButton = document.querySelector("#newsletter input[type='submit']");
		
		    
		Ta funckja wypisujemy pod inputem wszystko to co wyslalismy mejlem,
		ALE NIE WIDAC NIC no bo strona sie przeladowuje i nic nie zostaje na stronie
			
		submitFormButton.onclick = function(e)
		{
			var tmp = document.getElementById("tmp");	
			tmp.innerHTML = email.value;
			
		};
		
		DOPISUJEMY WIEC LINIJKE:  e.preventDefault();
		
		submitFormButton.onclick = function(e)
		{
			var tmp = document.getElementById("tmp");	
			e.preventDefault();							// Po tym nie wysylamy nic poza strone i wszystko widac !
			tmp.innerHTML = email.value;
		};
		
		ABY wreszcie wyslac ten formulraz, np pod spelnionym warunkiem, DAJEMY METODE submit();
		
		if (email.value === 'videokurspl@gmail.com')
            this.parentNode.submit();
		
		PRZYKLAD Z ZABLOKOWANIEM MENU KONTEKSTOWEGO NA BUTTONIE (nic sie nie pokaze pod prawym przyciskiem myszy)
		
		submitFormButton.oncontextmenu = function(e)
		{
				e.preventDefault();				//  i juz
		};
		
115. onscroll - zabawy suwakiem


	/*
		  window.pageYOffset;		-  pokazuje przesuniecie strony wzgledem Y
		  window.scrollBy(xaxis, yaxis);	-  ustawiamy gdzie ma sie przesunac scroll (x, y)
	 */
			
		Tworzenie przycisku przewiajania na sama gore strony.
		
		<div id="toTopButton">To top <span id="test"></span></div>
		
		<br><br><br><br><br> x 100
		
		CSS: postion:fixed  ->  ZAWSZE w tym samym miejscu na ekranie, nic go nie rusza !
		
		var toTopButton = document.getElementById("toTopButton");
		
		window.onscroll = function()
	   {
		   var test = document.getElementById("test");		//  div z wypisywaniem aktualnej pozycji
		   var toTopButton = document.getElementById("toTopButton");	//  przycisk przenoszacy na gore
		   
		   var yScrollAxis = window.pageYOffset;	// pozycja wzgledem y
		   
		   if (yScrollAxis > 300)				// jesli pozycja y wieksza niz 300 ...
			   toTopButton.style.display = "block";	// to pokaz przycisk
		   else
			   toTopButton.style.display = "none";	// jak nie to nie
		   
		   test.innerHTML = yScrollAxis;	// wypisanie na ekran pozycji y
	   };
	   
	   toTopButton.onclick = function()
	   {
		   window.scrollBy(0, -1 * window.pageYOffset);	- dajac ujemna wartosc, podejzewam ze po prostu idzie na poczatek
	   };
			

116. Zdarzenia Myszki

	/*
    onmouseover - gdy kursor myszy najedzie na element
    onmouseout - gdy kursor myszy opucie elemen
    onmousemove - gdy kursor myszy "jedzi" po elemencie.
    onclick = gdy element zostanie klikniêty
    ondblclick = gdy element zostanie 2x szybko klikniêty
    
    onclick to tak naprawdê:

    onmousedown - gdy mamy wciniêty przycisk myszy
    onmouseup - gdy opucimy przycisk myszy
	*/
	
	Robimy lapanie obrazka i przesuwanie go po stronie calej
	
	#wykrzyknik
	{
		position: absolute;
	}
	
	
	
	window.onload = function()		//  niech mu bedzie to on load ale mozna to pominac raczej
	{
		var wykrzyknik = document.getElementById("wykrzyknik");	// pobranie wykrzyknika
		
		wykrzyknik.onmousedown = function()		// GDY PRZYCISK MYSZY WSICNIETY
		{
			wykrzyknik.onmousemove = function(e)	// GDY  PRZESUWAMY KURSOR, bierzemy tez event
			{
				this.style.top = e.clientY - this.height / 2  + "px";
				this.style.left = e.clientX - this.width / 2 + "px";
			};
		};
		
		wykrzyknik.onmouseup = function() {
			this.onmousemove = null;	
			console.log("tu jestem");
		};
		
		wykrzyknik.ondragstart = function(e){
			e.preventDefault();
		};
		
	};
	
	WSZYSTKO TUTAJ GRA ! Tylko jak za szybko przeciagniemy myszke z obrazka to to przestaje dzialac.
	
	
		function movingImage(e, objToMove)
		{
			objToMove.style.left = e.clientX - objToMove.width / 2 + "px";
			objToMove.style.top = e.clientY - objToMove.height / 2 + "px";
		}

		window.onload = function()
		{
			var wykrzyknik = document.getElementById("wykrzyknik");
			
			wykrzyknik.onmousedown = function()
			{
				var self = this;	// to trzeba zrobic bo zmienna wykrzynik nie jest dostpena tu  (chuj wie czemu)
				document.onmousemove = function(e)
				{
					movingImage(e, self);
				};
			};
			
			wykrzyknik.onmouseup = function()
			{
				document.onmousemove = null;
			};
			
			wykrzyknik.ondragstart = function(e)
			{
			   e.preventDefault();  
			};
		};
	
117. Funkcje wywolywane po czasie - setTimeout i setInterval

	/*
   setTimeout - która wykonujê operacjê po okre¶lonym czasie z ang. time out - koniec czasu 
   setInterval - która wykonujê operacjê co interwa³ (co okre¶lony przez nas czas w nieskoñczono¶æ)

   clearTimeout - powstrzymuje operacjê, która ma zostaæ wykonana
   clearInterval - j.w tylko interwa³
	*/
	
	/* ogolnie to starsznie przydane to animacji np albo ile ktos byl na stronie itp */
	
	Tworzymy minutnik gdzie wpisana liczba zmniejsza sie co zadany przedzial czasu.
	
	    <body> 
        <input type="text" id="poczatkowaWartosc">
        <input type="button" value="W³±cz" id="przyciskOdpalStoper">
        <input type="button" value="Zatrzymaj" id="przyciskZatrzymajStoper">
        
        <div id="uchwytStopera"></div>
		</body>
		
		
	var timeOutStoper;  // musi byc globalna I NIESTETY DLATEGO NIE JEST TO DOBRE !!!
		
	function stopwatch(uchwytStopera, liczba)	// METODA Z TIMEOUTEM
	{
		uchwytStopera.innerHTML = liczba--;
		
		if(liczba<0)		
			return
			
		timeOutStoper = setTimeout(function()	// wszystko gra bo jest globalna !
		{
			stopwatch(uchwytStopera, liczba);	// rekurencja
		}, 1000);		
	}	
	
	function stopwatchInterval(uchwytStopera, liczba)
	{
		var timeIntervalRef = setInterval(function()	// zmienna zeby to sie moglo zatrzymac
		{        
			if (--liczba < 0)        
			{
				clearInterval(timeIntervalRef);
				return;			// wychodzimy z funkcji natychmiast po spelnieniu warunku
			}
			
			uchwytStopera.innerHTML = liczba; //liczba = 0
		}, 1000);
		
		return timeIntervalRef;
	}	
		
	var przyciskOdpalStoper = document.getElementById("przyciskOdpalStoper");
    var przyciskZatrzymajStoper = document.getElementById("przyciskZatrzymajStoper");	
	
	var uchwytStopera = document.getElementById("uchwytStopera");
	
	 var timeIntervalRef;	// zmienna do zatrzymania intervalu
	
	przyciskOdpalStoper.onclick = function()
	{
		var poczatkowaWartosc = document.getElementById("poczatkowaWartosc").value;
		uchwytStopera.innerHTML = poczatkowaWartosc;
		stopwatchInterval(uchwytStopera, poczatkowaWartosc);	
	}
	
	przyciskZatrzymajStoper.onclick = function()
    {
        clearInterval(timeIntervalRef);
    };
	
/*    METODA SET TIMEOUT	
	
	przyciskOdpalStoper.onclick = function()
	{		// poczatkowa wartosc musimy pobierac po odpaleniu przycisku
		var poczatkowaWartosc = document.getElementById("poczatkowaWartosc").value;
		uchwytStopera.innerHTML = poczatkowaWartosc;
		
		if(timeOutStoper)					// jest globalna wiec mozemy czyscic !
			clearTimeout(timeOutStoper);
		
		stopwatch(uchwytStopera, poczatkowaWartosc);	
	}
	
	przyciskZatrzymajStoper.onclick = function()
	{
		clearTimeout(timeOutStoper);
	}
*/

118. Obiektowe usprawnienie kodu

	Chujow to wytlumaczyl, samemu trzeba to przerobic ...
	
	var timeOutStoper;

	function stopwatch(uchwytStopera, liczba)
	{
		uchwytStopera.innerHTML = liczba--;
		
		if (liczba < 0)
			return;
		timeOutStoper = setTimeout(function()
		{
			stopwatch(uchwytStopera, liczba);
		}, 1000);
	}

	function Stopwatch(uchwytStopera)
	{
		this.uchwytStopera = uchwytStopera;
		this.poczatkowaWartosc;
		this.timeOutRef = undefined;
		this.odpal = function(poczatkowaWartosc)
		{
			this.poczatkowaWartosc = poczatkowaWartosc;
			if (this.timeOutRef)
				this.zatrzymaj();
			
			this.startStoper();
		};
		this.startStoper = function()
		{
			if (this.poczatkowaWartosc < 0)
				return;
			
			this.uchwytStopera.innerHTML = this.poczatkowaWartosc--;
			
			var self = this;
			
			this.timeOutRef = setTimeout(function()
			{
				self.startStoper();
			}, 1000);
		};
		this.zatrzymaj = function()
		{
			clearTimeout(this.timeOutRef);
		};
		this.kontynuuj = function()
		{
			this.startStoper();
		};
	}

	window.onload = function()
	{
		var przyciskOdpalStoper = document.getElementById("przyciskOdpalStoper");
		var przyciskZatrzymajStoper = document.getElementById("przyciskZatrzymajStoper");
		var przyciskKontynuujStoper = document.getElementById("przyciskKontynuujStoper");
		
		
		var uchwytStopera = document.getElementById("uchwytStopera");
		
		var stoper = new Stopwatch(uchwytStopera);
		
		przyciskOdpalStoper.onclick = function()
		{
			var poczatkowaWartosc = document.getElementById("poczatkowaWartosc").value; 
			stoper.odpal(poczatkowaWartosc);
		};
		przyciskZatrzymajStoper.onclick = function()
		{
			stoper.zatrzymaj();
		};
		przyciskKontynuujStoper.onclick = function()
		{
			stoper.kontynuuj();
		};	
	};